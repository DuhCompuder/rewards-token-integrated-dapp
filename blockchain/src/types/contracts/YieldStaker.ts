/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface YieldStakerInterface extends utils.Interface {
  functions: {
    "RATE_1DAY()": FunctionFragment;
    "calculateYieldTime(address)": FunctionFragment;
    "calculateYieldTotal(address)": FunctionFragment;
    "gameToken()": FunctionFragment;
    "isStaking(address)": FunctionFragment;
    "stake()": FunctionFragment;
    "stakingBalance(address)": FunctionFragment;
    "startTime(address)": FunctionFragment;
    "tokenBalance(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "withdrawYield()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "RATE_1DAY"
      | "calculateYieldTime"
      | "calculateYieldTotal"
      | "gameToken"
      | "isStaking"
      | "stake"
      | "stakingBalance"
      | "startTime"
      | "tokenBalance"
      | "unstake"
      | "withdrawYield"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "RATE_1DAY", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateYieldTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateYieldTotal",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "isStaking",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stakingBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "startTime",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawYield",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "RATE_1DAY", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "calculateYieldTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateYieldTotal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isStaking", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawYield",
    data: BytesLike
  ): Result;

  events: {
    "Stake(address,uint256)": EventFragment;
    "Unstake(address,uint256)": EventFragment;
    "YieldWithdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Stake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstake"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "YieldWithdraw"): EventFragment;
}

export interface StakeEventObject {
  from: string;
  amount: BigNumber;
}
export type StakeEvent = TypedEvent<[string, BigNumber], StakeEventObject>;

export type StakeEventFilter = TypedEventFilter<StakeEvent>;

export interface UnstakeEventObject {
  from: string;
  amount: BigNumber;
}
export type UnstakeEvent = TypedEvent<[string, BigNumber], UnstakeEventObject>;

export type UnstakeEventFilter = TypedEventFilter<UnstakeEvent>;

export interface YieldWithdrawEventObject {
  to: string;
  amount: BigNumber;
}
export type YieldWithdrawEvent = TypedEvent<
  [string, BigNumber],
  YieldWithdrawEventObject
>;

export type YieldWithdrawEventFilter = TypedEventFilter<YieldWithdrawEvent>;

export interface YieldStaker extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: YieldStakerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    RATE_1DAY(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateYieldTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateYieldTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gameToken(overrides?: CallOverrides): Promise<[string]>;

    isStaking(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakingBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    startTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    tokenBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  RATE_1DAY(overrides?: CallOverrides): Promise<BigNumber>;

  calculateYieldTime(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateYieldTotal(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gameToken(overrides?: CallOverrides): Promise<string>;

  isStaking(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stake(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakingBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  startTime(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  tokenBalance(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unstake(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawYield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    RATE_1DAY(overrides?: CallOverrides): Promise<BigNumber>;

    calculateYieldTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateYieldTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameToken(overrides?: CallOverrides): Promise<string>;

    isStaking(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stake(overrides?: CallOverrides): Promise<void>;

    stakingBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawYield(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Stake(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;
    Stake(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): StakeEventFilter;

    "Unstake(address,uint256)"(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;
    Unstake(
      from?: PromiseOrValue<string> | null,
      amount?: null
    ): UnstakeEventFilter;

    "YieldWithdraw(address,uint256)"(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): YieldWithdrawEventFilter;
    YieldWithdraw(
      to?: PromiseOrValue<string> | null,
      amount?: null
    ): YieldWithdrawEventFilter;
  };

  estimateGas: {
    RATE_1DAY(overrides?: CallOverrides): Promise<BigNumber>;

    calculateYieldTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateYieldTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameToken(overrides?: CallOverrides): Promise<BigNumber>;

    isStaking(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakingBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    startTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    RATE_1DAY(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateYieldTime(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateYieldTotal(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isStaking(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stake(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakingBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    startTime(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenBalance(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawYield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}

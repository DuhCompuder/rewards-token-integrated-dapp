/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  YieldStaker,
  YieldStakerInterface,
} from "../../contracts/YieldStaker";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGameToken",
        name: "_gameToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "YieldWithdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "RATE_1DAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateYieldTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateYieldTotal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gameToken",
    outputs: [
      {
        internalType: "contract IGameToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isStaking",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakingBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawYield",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620012ce380380620012ce8339818101604052810190620000379190620000fd565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200012f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b6000620000c582620000a4565b9050919050565b620000d781620000b8565b8114620000e357600080fd5b50565b600081519050620000f781620000cc565b92915050565b6000602082840312156200011657620001156200007f565b5b60006200012684828501620000e6565b91505092915050565b61118f806200013f6000396000f3fe6080604052600436106100a05760003560e01c80636e1dc66e116100645780636e1dc66e146101845780636f49712b146101c1578063980d6116146101fe578063c3dfdae61461023b578063e507a8a414610266578063eedc966a1461027d576100a7565b806306872661146100ac5780632e17de78146100e95780633a4b66f1146101125780633afaf1651461011c57806345bc78ab14610147576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610ce3565b6102ba565b6040516100e09190610d29565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190610d70565b610360565b005b61011a6106ae565b005b34801561012857600080fd5b506101316108ee565b60405161013e9190610d29565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190610ce3565b6108f5565b60405161017b9190610d29565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190610ce3565b61090d565b6040516101b89190610d29565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610ce3565b610925565b6040516101f59190610db8565b60405180910390f35b34801561020a57600080fd5b5061022560048036038101906102209190610ce3565b610945565b6040516102329190610d29565b60405180910390f35b34801561024757600080fd5b506102506109a4565b60405161025d9190610e32565b60405180910390f35b34801561027257600080fd5b5061027b6109ca565b005b34801561028957600080fd5b506102a4600480360381019061029f9190610ce3565b610c68565b6040516102b19190610d29565b60405180910390f35b600080670de0b6b3a76400006102cf84610945565b6102d99190610e7c565b90506000620151809050600081836102f19190610eed565b90506000670de0b6b3a7640000826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103489190610e7c565b6103529190610eed565b905080945050505050919050565b600180156103ac5750806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055610440576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161043790610f7b565b60405180910390fd5b600061044b336102ba565b905042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600082905060009250806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546104e89190610f9b565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161051590611000565b60006040518083038185875af1925050503d8060008114610552576040519150601f19603f3d011682016040523d82523d6000602084013e610557565b606091505b505090508061056557600080fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105b49190611015565b9250508190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020540361065a576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd856040516106a09190610d29565b60405180910390a250505050565b600034116106f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e890611095565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036107ae576000610754336102ba565b905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107a59190611015565b92505081905550505b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107fc9190611015565b9250508190555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a346040516108e49190610d29565b60405180910390a2565b6201518081565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000804290506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826109989190610f9b565b90508092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006109d5336102ba565b90506000811180610a2557506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b610a64576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5b90611101565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b44576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508082610b409190611015565b9150505b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a99b4f033836040518363ffffffff1660e01b8152600401610be5929190611130565b600060405180830381600087803b158015610bff57600080fd5b505af1158015610c13573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f92044e3943309ee5950e21bc7421d02c1df75f0df33c0d97c1143687b49a4c5782604051610c5d9190610d29565b60405180910390a250565b60036020528060005260406000206000915090505481565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cb082610c85565b9050919050565b610cc081610ca5565b8114610ccb57600080fd5b50565b600081359050610cdd81610cb7565b92915050565b600060208284031215610cf957610cf8610c80565b5b6000610d0784828501610cce565b91505092915050565b6000819050919050565b610d2381610d10565b82525050565b6000602082019050610d3e6000830184610d1a565b92915050565b610d4d81610d10565b8114610d5857600080fd5b50565b600081359050610d6a81610d44565b92915050565b600060208284031215610d8657610d85610c80565b5b6000610d9484828501610d5b565b91505092915050565b60008115159050919050565b610db281610d9d565b82525050565b6000602082019050610dcd6000830184610da9565b92915050565b6000819050919050565b6000610df8610df3610dee84610c85565b610dd3565b610c85565b9050919050565b6000610e0a82610ddd565b9050919050565b6000610e1c82610dff565b9050919050565b610e2c81610e11565b82525050565b6000602082019050610e476000830184610e23565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8782610d10565b9150610e9283610d10565b9250828202610ea081610d10565b91508282048414831517610eb757610eb6610e4d565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ef882610d10565b9150610f0383610d10565b925082610f1357610f12610ebe565b5b828204905092915050565b600082825260208201905092915050565b7f4e6f7468696e6720746f20756e7374616b650000000000000000000000000000600082015250565b6000610f65601283610f1e565b9150610f7082610f2f565b602082019050919050565b60006020820190508181036000830152610f9481610f58565b9050919050565b6000610fa682610d10565b9150610fb183610d10565b9250828203905081811115610fc957610fc8610e4d565b5b92915050565b600081905092915050565b50565b6000610fea600083610fcf565b9150610ff582610fda565b600082019050919050565b600061100b82610fdd565b9150819050919050565b600061102082610d10565b915061102b83610d10565b925082820190508082111561104357611042610e4d565b5b92915050565b7f596f752063616e6e6f74207374616b65207a65726f20746f6b656e7300000000600082015250565b600061107f601c83610f1e565b915061108a82611049565b602082019050919050565b600060208201905081810360008301526110ae81611072565b9050919050565b7f4e6f7468696e6720746f20776974686472617700000000000000000000000000600082015250565b60006110eb601383610f1e565b91506110f6826110b5565b602082019050919050565b6000602082019050818103600083015261111a816110de565b9050919050565b61112a81610ca5565b82525050565b60006040820190506111456000830185611121565b6111526020830184610d1a565b939250505056fea2646970667358221220e7d56aa98e36f9651a9d61ceebf96c407eb2fe58c695b90409d6a6a687d5409c64736f6c63430008110033";

type YieldStakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldStakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldStaker__factory extends ContractFactory {
  constructor(...args: YieldStakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gameToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YieldStaker> {
    return super.deploy(_gameToken, overrides || {}) as Promise<YieldStaker>;
  }
  override getDeployTransaction(
    _gameToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameToken, overrides || {});
  }
  override attach(address: string): YieldStaker {
    return super.attach(address) as YieldStaker;
  }
  override connect(signer: Signer): YieldStaker__factory {
    return super.connect(signer) as YieldStaker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldStakerInterface {
    return new utils.Interface(_abi) as YieldStakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldStaker {
    return new Contract(address, _abi, signerOrProvider) as YieldStaker;
  }
}

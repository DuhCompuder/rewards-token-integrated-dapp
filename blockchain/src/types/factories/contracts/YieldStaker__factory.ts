/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  YieldStaker,
  YieldStakerInterface,
} from "../../contracts/YieldStaker";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract IGameToken",
        name: "_gameToken",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Stake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Unstake",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "YieldWithdraw",
    type: "event",
  },
  {
    inputs: [],
    name: "RATE_1DAY",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateYieldTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "calculateYieldTotal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gameToken",
    outputs: [
      {
        internalType: "contract IGameToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "isStaking",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "stakingBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "startTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "tokenBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdrawYield",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001481380380620014818339818101604052810190620000379190620000fd565b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200012f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b18262000084565b9050919050565b6000620000c582620000a4565b9050919050565b620000d781620000b8565b8114620000e357600080fd5b50565b600081519050620000f781620000cc565b92915050565b6000602082840312156200011657620001156200007f565b5b60006200012684828501620000e6565b91505092915050565b611342806200013f6000396000f3fe6080604052600436106100a05760003560e01c80636e1dc66e116100645780636e1dc66e146101845780636f49712b146101c1578063980d6116146101fe578063c3dfdae61461023b578063e507a8a414610266578063eedc966a1461027d576100a7565b806306872661146100ac5780632e17de78146100e95780633a4b66f1146101125780633afaf1651461011c57806345bc78ab14610147576100a7565b366100a757005b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce9190610de7565b6102ba565b6040516100e09190610e2d565b60405180910390f35b3480156100f557600080fd5b50610110600480360381019061010b9190610e74565b61039f565b005b61011a6106ed565b005b34801561012857600080fd5b5061013161092d565b60405161013e9190610e2d565b60405180910390f35b34801561015357600080fd5b5061016e60048036038101906101699190610de7565b610934565b60405161017b9190610e2d565b60405180910390f35b34801561019057600080fd5b506101ab60048036038101906101a69190610de7565b61094c565b6040516101b89190610e2d565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190610de7565b610964565b6040516101f59190610ebc565b60405180910390f35b34801561020a57600080fd5b5061022560048036038101906102209190610de7565b610984565b6040516102329190610e2d565b60405180910390f35b34801561024757600080fd5b506102506109e3565b60405161025d9190610f36565b60405180910390f35b34801561027257600080fd5b5061027b610a09565b005b34801561028957600080fd5b506102a4600480360381019061029f9190610de7565b610ca7565b6040516102b19190610e2d565b60405180910390f35b600080670de0b6b3a76400006102cf84610984565b6102d99190610f80565b90506000620151809050600081836102f19190610ff1565b90506000670de0b6b3a7640000826000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546103489190610f80565b6103529190610ff1565b90506103936040518060400160405280601a81526020017f5472616e7366657272696e672072617720257320746f6b656e7300000000000081525082610cbf565b80945050505050919050565b600180156103eb5750806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410155b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905561047f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104769061107f565b60405180910390fd5b600061048a336102ba565b905042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600082905060009250806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610527919061109f565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161055490611104565b60006040518083038185875af1925050503d8060008114610591576040519150601f19603f3d011682016040523d82523d6000602084013e610596565b606091505b50509050806105a457600080fd5b82600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105f39190611119565b9250508190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403610699576000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f85082129d87b2fe11527cb1b3b7a520aeb5aa6913f88a3d8757fe40d1db02fdd856040516106df9190610e2d565b60405180910390a250505050565b60003411610730576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072790611199565b60405180910390fd5b60011515600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff161515036107ed576000610793336102ba565b905080600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107e49190611119565b92505081905550505b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461083b9190611119565b9250508190555042600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555060018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167febedb8b3c678666e7f36970bc8f57abf6d8fa2e828c0da91ea5b75bf68ed101a346040516109239190610e2d565b60405180910390a2565b6201518081565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b60016020528060005260406000206000915054906101000a900460ff1681565b6000804290506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054826109d7919061109f565b90508092505050919050565b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000610a14336102ba565b90506000811180610a6457506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054115b610aa3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9a90611205565b60405180910390fd5b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610b83576000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508082610b7f9190611119565b9150505b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639a99b4f033836040518363ffffffff1660e01b8152600401610c24929190611234565b600060405180830381600087803b158015610c3e57600080fd5b505af1158015610c52573d6000803e3d6000fd5b505050503373ffffffffffffffffffffffffffffffffffffffff167f92044e3943309ee5950e21bc7421d02c1df75f0df33c0d97c1143687b49a4c5782604051610c9c9190610e2d565b60405180910390a250565b60036020528060005260406000206000915090505481565b610d578282604051602401610cd59291906112dc565b6040516020818303038152906040527fb60e72cc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050610d5b565b5050565b60008151905060006a636f6e736f6c652e6c6f679050602083016000808483855afa5050505050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610db482610d89565b9050919050565b610dc481610da9565b8114610dcf57600080fd5b50565b600081359050610de181610dbb565b92915050565b600060208284031215610dfd57610dfc610d84565b5b6000610e0b84828501610dd2565b91505092915050565b6000819050919050565b610e2781610e14565b82525050565b6000602082019050610e426000830184610e1e565b92915050565b610e5181610e14565b8114610e5c57600080fd5b50565b600081359050610e6e81610e48565b92915050565b600060208284031215610e8a57610e89610d84565b5b6000610e9884828501610e5f565b91505092915050565b60008115159050919050565b610eb681610ea1565b82525050565b6000602082019050610ed16000830184610ead565b92915050565b6000819050919050565b6000610efc610ef7610ef284610d89565b610ed7565b610d89565b9050919050565b6000610f0e82610ee1565b9050919050565b6000610f2082610f03565b9050919050565b610f3081610f15565b82525050565b6000602082019050610f4b6000830184610f27565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f8b82610e14565b9150610f9683610e14565b9250828202610fa481610e14565b91508282048414831517610fbb57610fba610f51565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ffc82610e14565b915061100783610e14565b92508261101757611016610fc2565b5b828204905092915050565b600082825260208201905092915050565b7f4e6f7468696e6720746f20756e7374616b650000000000000000000000000000600082015250565b6000611069601283611022565b915061107482611033565b602082019050919050565b600060208201905081810360008301526110988161105c565b9050919050565b60006110aa82610e14565b91506110b583610e14565b92508282039050818111156110cd576110cc610f51565b5b92915050565b600081905092915050565b50565b60006110ee6000836110d3565b91506110f9826110de565b600082019050919050565b600061110f826110e1565b9150819050919050565b600061112482610e14565b915061112f83610e14565b925082820190508082111561114757611146610f51565b5b92915050565b7f596f752063616e6e6f74207374616b65207a65726f20746f6b656e7300000000600082015250565b6000611183601c83611022565b915061118e8261114d565b602082019050919050565b600060208201905081810360008301526111b281611176565b9050919050565b7f4e6f7468696e6720746f20776974686472617700000000000000000000000000600082015250565b60006111ef601383611022565b91506111fa826111b9565b602082019050919050565b6000602082019050818103600083015261121e816111e2565b9050919050565b61122e81610da9565b82525050565b60006040820190506112496000830185611225565b6112566020830184610e1e565b9392505050565b600081519050919050565b60005b8381101561128657808201518184015260208101905061126b565b60008484015250505050565b6000601f19601f8301169050919050565b60006112ae8261125d565b6112b88185611022565b93506112c8818560208601611268565b6112d181611292565b840191505092915050565b600060408201905081810360008301526112f681856112a3565b90506113056020830184610e1e565b939250505056fea26469706673582212202a3b0b6430ba9ff0009090d321c7dd9c66b64ac048eabc4b3899a704a594cd9064736f6c63430008110033";

type YieldStakerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: YieldStakerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class YieldStaker__factory extends ContractFactory {
  constructor(...args: YieldStakerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _gameToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<YieldStaker> {
    return super.deploy(_gameToken, overrides || {}) as Promise<YieldStaker>;
  }
  override getDeployTransaction(
    _gameToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_gameToken, overrides || {});
  }
  override attach(address: string): YieldStaker {
    return super.attach(address) as YieldStaker;
  }
  override connect(signer: Signer): YieldStaker__factory {
    return super.connect(signer) as YieldStaker__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): YieldStakerInterface {
    return new utils.Interface(_abi) as YieldStakerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): YieldStaker {
    return new Contract(address, _abi, signerOrProvider) as YieldStaker;
  }
}
